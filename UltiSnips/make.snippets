snippet sl
###############################################################################
endsnippet
snippet checkos
###############################################################################
# check OS
###############################################################################
ifdef SystemRoot
	OS = Windows
else ifeq (\$(shell uname -s),Darwin)
	OS = MacOSX
else
	OS = Linux
endif
endsnippet
snippet C
###############################################################################
# compiler setting
###############################################################################
CC      = gcc
CFLAGS  = -g -Wall -std=c99
LIBS    = -lm
INCPATH =
DIR     = \$(shell pwd)

###############################################################################
# source files setting
###############################################################################
C_SOURCES = \$(shell find . -name "*.c")
C_OBJS    = \$(patsubst %.c,%.o,\$(wildcard \$(C_SOURCES)))
OBJS      = \$(C_OBJS)
EXEC      = \$(shell basename \$(DIR))

###############################################################################
.PHONY : clean clean_all
###############################################################################
all: \$(EXEC)

%.o:%.c
	\$(CC) \$(CFLAGS) \$(INCPATH) -c \$< -o \$@

\$(EXEC): \$(OBJS)
	\$(CC) \$(OBJS) -o \$(EXEC) \$(LIBS)

###############################################################################
clean:
	@rm -vfr \$(OBJS)
clean_all: clean
	@rm -vfr \$(EXEC)
###############################################################################
CTAGS:
	ctags -R --c++-kinds=+p --fields=+iaS --extra=+q
###############################################################################
endsnippet
snippet CPP
###############################################################################
# compiler setting
###############################################################################
CC         = gcc
CXX        = g++
CCXXFLAGS  = -g -Wall
CFLAGS     = -std=c99 \$(CCXXFLAGS)
CXXFLAGS   = -Weffc++ \$(CCXXFLAGS)
LIBS       = -lm
INCPATH    =
DIR        = \$(shell pwd)

###############################################################################
# source files setting
###############################################################################
C_SOURCES   = \$(shell find . -name "*.c")
CXX_SOURCES = \$(shell find . -name "*.cpp")
C_OBJS      = \$(patsubst %.c,%.o,\$(wildcard \$(C_SOURCES)))
CXX_OBJS    = \$(patsubst %.cpp,%.o,\$(wildcard \$(CXX_SOURCES)))
OBJS        = \$(C_OBJS) \$(CXX_OBJS)
EXEC        = \$(shell basename \$(DIR))

###############################################################################
.PHONY : clean clean_all
###############################################################################
all: \$(EXEC)

%.o:%.c
	\$(CC)  \$(CFLAGS)   \$(INCPATH) -c \$< -o \$@
%.o:%.cpp
	\$(CXX) \$(CXXFLAGS) \$(INCPATH) -c \$< -o \$@

\$(EXEC): \$(OBJS)
	\$(CXX) \$(OBJS) -o \$(EXEC) \$(LIBS)

###############################################################################
clean:
	@rm -vfr \$(OBJS)
clean_all: clean
	@rm -vfr \$(EXEC)
###############################################################################
CTAGS:
	ctags -R --c++-kinds=+p --fields=+iaS --extra=+q
###############################################################################
endsnippet
snippet CLIB
###############################################################################
# compiler setting
###############################################################################
CC       = gcc
CFLAGS   = -g -Wall -std=c99
AR       = ar
LIBS     = -lm
INCPATH  = -I.
DIR      = \$(shell pwd)
BASENAME = \$(shell basename \$(DIR))

###############################################################################
# source files setting
###############################################################################
C_SOURCES   	 = \$(shell find . -name "*.c")
C_STATIC_OBJS    = \$(patsubst %.c,%_static.o,\$(wildcard \$(C_SOURCES)))
C_DYNAMIC_OBJS   = \$(patsubst %.c,%_dynamic.o,\$(wildcard \$(C_SOURCES)))
STATIC_OBJS      = \$(C_STATIC_OBJS)
DYNAMIC_OBJS     = \$(C_DYNAMIC_OBJS)
LIB_A            = \$(BASENAME).a
LIB_SO           = \$(BASENAME).so

###############################################################################
.PHONY : clean
###############################################################################
all: \$(LIB_A) \$(LIB_SO)
	@echo ' '

%_static.o:%.c
	\$(CC) -c \$(CFLAGS) \$(INCPATH) \$< -o \$@

%_dynamic.o:%.c
	\$(CC) -c \$(CFLAGS) \$(INCPATH) \$< -o \$@ -fPIC

\$(LIB_A): \$(STATIC_OBJS)
	\$(AR) rcs \$@ \$(STATIC_OBJS)
	@echo 'Finished building: \$@'

\$(LIB_SO): \$(DYNAMIC_OBJS)
	\$(CC) \$(DYNAMIC_OBJS) -shared -o \$@
	@echo 'Finished building: \$@'
###############################################################################
clean:
	@rm -vfr \$(STATIC_OBJS) \$(LIB_A) \$(DYNAMIC_OBJS) \$(LIB_SO)
###############################################################################
endsnippet
snippet CPPLIB
###############################################################################
# compiler setting
###############################################################################
CC       = gcc
CXX      = g++
CCXXFLAGS  = -g -Wall
CFLAGS     = -std=c99 \$(CCXXFLAGS)
CXXFLAGS   = -Weffc++ \$(CCXXFLAGS)
AR       = ar
LIBS     = -lm
INCPATH  = -I.
DIR      = \$(shell pwd)
BASENAME = \$(shell basename \$(DIR))

###############################################################################
# source files setting
###############################################################################
C_SOURCES   	 = \$(shell find . -name "*.c")
CXX_SOURCES 	 = \$(shell find . -name "*.cpp")
C_STATIC_OBJS    = \$(patsubst %.c,%_static.o,\$(wildcard \$(C_SOURCES)))
CXX_STATIC_OBJS  = \$(patsubst %.cpp,%_static.o,\$(wildcard \$(CXX_SOURCES)))
C_DYNAMIC_OBJS   = \$(patsubst %.c,%_dynamic.o,\$(wildcard \$(C_SOURCES)))
CXX_DYNAMIC_OBJS = \$(patsubst %.cpp,%_dynamic.o,\$(wildcard \$(CXX_SOURCES)))
STATIC_OBJS      = \$(C_STATIC_OBJS) \$(CXX_STATIC_OBJS)
DYNAMIC_OBJS     = \$(C_DYNAMIC_OBJS) \$(CXX_DYNAMIC_OBJS)
LIB_A            = \$(BASENAME).a
LIB_SO           = \$(BASENAME).so

###############################################################################
.PHONY : clean
###############################################################################
all: \$(LIB_A) \$(LIB_SO)
	@echo ' '

%_static.o:%.c
	\$(CC) -c \$(CFLAGS) \$(INCPATH) \$< -o \$@
%_static.o:%.cpp
	\$(CXX) -c \$(CXXFLAGS) \$(INCPATH) \$< -o \$@

%_dynamic.o:%.c
	\$(CC) -c \$(CFLAGS) \$(INCPATH) \$< -o \$@ -fPIC
%_dynamic.o:%.cpp
	\$(CXX) -c \$(CXXFLAGS) \$(INCPATH) \$< -o \$@ -fPIC

\$(LIB_A): \$(STATIC_OBJS)
	\$(AR) rcs \$@ \$(STATIC_OBJS)
	@echo 'Finished building: \$@'

\$(LIB_SO): \$(DYNAMIC_OBJS)
	\$(CXX) \$(DYNAMIC_OBJS) -shared -o \$@
	@echo 'Finished building: \$@'
###############################################################################
clean:
	@rm -vfr \$(STATIC_OBJS) \$(LIB_A) \$(DYNAMIC_OBJS) \$(LIB_SO)
###############################################################################
endsnippet
snippet driver
	obj-m += main.o

	all:
		make -C /lib/modules/\$(shell uname -r)/build M=\$(PWD) modules

	clean:
		make -C /lib/modules/\$(shell uname -r)/build M=\$(PWD) clean
endsnippet
snippet gtklib
	\`pkg-config --libs gtk+-2.0\`
endsnippet
snippet gtkflag
	\`pkg-config --cflags gtk+-2.0\`
endsnippet
snippet java
###############################################################################
# compiler setting
###############################################################################
JAVAC        = javac
JAVA         = java
DIR          = \$(shell pwd)
###############################################################################
# source files setting
###############################################################################
JAVA_SOURCES = \$(shell find . -name "*.java")
JAVA_CLASSES = \$(patsubst %.java,%.class,\$(wildcard \$(JAVA_SOURCES)))
EXEC         = \$(shell basename \$(DIR))

###############################################################################
.PHONY : clean clean_all
###############################################################################
all: \$(JAVA_CLASSES)

%.class:%.java
	\$(JAVAC) \$<
###############################################################################
run: \$(JAVA_CLASSES)
	@\$(JAVA) \$(EXEC)
###############################################################################
clean:
	@rm -vfr \$(JAVA_CLASSES)
clean_all: clean
###############################################################################
endsnippet
